"""
Generates a map from SCLEX constants to a map of string to lexer token type
constants where the string is the lower-case form of the SCE constant with
the language-specific prefix stripped off.

e.g. SCE_SOMELANG_COMMENT becomes 'comment'.

This allows use to more easily make syntax highlighting themes without having to
specify colours for every single language. Of course some languages have their
own peculiar token types which can optionally be specified in the theme.

The resulting file contains only numbers and strings so there is no need to
include the constants specified in scilex.py.

Scintilla really doesn't make this easy for us, and the only real documentation
for any of this stuff is the C++ source code.

This is not exhaustive of all lexers supported by Scintilla, I have only
included the languages which I thought would be useful and excluded the
random configuration file formats and obscure, niche or proprietary languages.
"""

import re
import pprint

import scilex

constants = scilex.__dict__
constant_names = sorted(constants.keys())

sce_prefix_to_lexer_types = {
    "SCE_P_":            [scilex.SCLEX_PYTHON],
    "SCE_C_":            [scilex.SCLEX_CPP],
    "SCE_H_":            [scilex.SCLEX_HTML, scilex.SCLEX_XML, scilex.SCLEX_PHPSCRIPT],
    "SCE_PL_":           [scilex.SCLEX_PERL],
    "SCE_B_":            [scilex.SCLEX_BLITZBASIC, scilex.SCLEX_PUREBASIC, scilex.SCLEX_FREEBASIC, scilex.SCLEX_POWERBASIC, scilex.SCLEX_VB, scilex.SCLEX_VBSCRIPT],
    "SCE_SQL_":          [scilex.SCLEX_SQL],
    "SCE_MAKE_":         [scilex.SCLEX_MAKEFILE],
    "SCE_BAT_":          [scilex.SCLEX_BATCH],
    "SCE_L_":            [scilex.SCLEX_LATEX],
    "SCE_LUA_":          [scilex.SCLEX_LUA],
    "SCE_DIFF_":         [scilex.SCLEX_DIFF],
    "SCE_PAS_":          [scilex.SCLEX_PASCAL],
    "SCE_ADA_":          [scilex.SCLEX_ADA],
    "SCE_LISP_":         [scilex.SCLEX_LISP],
    "SCE_RB_":           [scilex.SCLEX_RUBY],
    "SCE_EIFFEL_":       [scilex.SCLEX_EIFFEL, scilex.SCLEX_EIFFELKW],
    "SCE_TCL_":          [scilex.SCLEX_TCL],
    "SCE_MATLAB_":       [scilex.SCLEX_MATLAB, scilex.SCLEX_OCTAVE],
    "SCE_ASM_":          [scilex.SCLEX_ASM],
    "SCE_F_":            [scilex.SCLEX_FORTRAN, scilex.SCLEX_F77],
    "SCE_CSS_":          [scilex.SCLEX_CSS],
    "SCE_PS_":           [scilex.SCLEX_PS],
    "SCE_YAML_":         [scilex.SCLEX_YAML],
    "SCE_TEX_":          [scilex.SCLEX_TEX],
    "SCE_FORTH_":        [scilex.SCLEX_FORTH],
    "SCE_ERLANG_":       [scilex.SCLEX_ERLANG],
    "SCE_MSSQL_":        [scilex.SCLEX_MSSQL],
    "SCE_V_":            [scilex.SCLEX_VERILOG],
    "SCE_SH_":           [scilex.SCLEX_BASH],
    "SCE_VHDL_":         [scilex.SCLEX_VHDL],
    "SCE_CAML_":         [scilex.SCLEX_CAML],
    "SCE_HA_":           [scilex.SCLEX_HASKELL],
    "SCE_HPHP_":         [scilex.SCLEX_PHPSCRIPT],
    "SCE_REBOL_":        [scilex.SCLEX_REBOL],
    "SCE_ST_":           [scilex.SCLEX_SMALLTALK],
    "SCE_D_":            [scilex.SCLEX_D],
    "SCE_CMAKE_":        [scilex.SCLEX_CMAKE],
    "SCE_R_":            [scilex.SCLEX_R],
    "SCE_POWERSHELL_":   [scilex.SCLEX_POWERSHELL],
    "SCE_MYSQL_":        [scilex.SCLEX_MYSQL],
    "SCE_SML_":          [scilex.SCLEX_SML],
    "SCE_MARKDOWN_":     [scilex.SCLEX_MARKDOWN],
    "SCE_MODULA_":       [scilex.SCLEX_MODULA],
    "SCE_COFFEESCRIPT_": [scilex.SCLEX_COFFEESCRIPT],
    "SCE_VISUALPROLOG_": [scilex.SCLEX_VISUALPROLOG],
}

sce_prefixes = sce_prefix_to_lexer_types.keys()
sce_prefix_re = re.compile("|".join(prefix for prefix in sce_prefixes))

lexer_constants = {}
for lexer_types in sce_prefix_to_lexer_types.itervalues():
    for lexer_type in lexer_types:
        lexer_constants[lexer_type] = {}

all_short_names = set()
for name in constant_names:
    m = sce_prefix_re.match(name)
    if m:
        short_name = name[len(m.group(0)):].lower().replace("_", "")
        if short_name.startswith("word"):
            short_name = "key" + short_name
        if short_name != "default":
            value = constants[name]
            all_short_names.add(short_name)
            for lexer_type in sce_prefix_to_lexer_types[m.group(0)]:
                lexer_constants[lexer_type][short_name] = value

pp = pprint.PrettyPrinter()

code = """\
#
# DO NOT EDIT: Generated by gen_sci_lexer_map.py
#

sci_lexer_map = \\
%s
""" % pp.pformat(dict(lexer_constants))

with open("sci_lexer_map.py", "w") as out:
    out.write(code)

for short_name in sorted(all_short_names):
    print short_name
